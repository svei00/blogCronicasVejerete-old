// /src/lib/models/comment.model.ts
// Importing necessary Mongoose components
import mongoose, { Schema, model, models, Document } from "mongoose";

// Interface for a Comment document extending Mongoose's Document.
// This allows us to use Mongoose methods like `.save()` on the returned objects.
export interface IComment extends Document {
  _id: mongoose.Types.ObjectId | string;   // Unique identifier for the comment
  content: string;                         // The actual text of the comment
  postId: string;                          // ID of the post the comment belongs to
  userId: mongoose.Types.ObjectId;         // Reference to the User who created the comment (linked to User model)
  clerkUserId?: string;                    // Clerk user ID for Clerk-authenticated users (always stored if available)
  likes: string[];                         // Array of user IDs who liked the comment
  numberOfLikes: number;                   // Cached number of likes for performance
  createdAt: Date;                         // Auto-generated by Mongoose
  updatedAt: Date;                         // Auto-generated by Mongoose
}

// Define the Comment schema using the interface
const CommentSchema = new Schema<IComment>(
  {
    content: { type: String, required: true },        // Comment content must be provided
    postId: { type: String, required: true },         // Associated post ID is required
    userId: {                                         // Reference to the User model
      type: mongoose.Schema.Types.ObjectId,          // <-- Mongo ObjectId
      ref: "User",
      required: true,
    },
    clerkUserId: { type: String, required: false },   // Always saved if provided from frontend/backend
    likes: { type: [String], default: [] },          // Initialize with empty likes array
    numberOfLikes: { type: Number, default: 0 },     // Initialize likes count to 0
  },
  { timestamps: true } // Automatically add createdAt and updatedAt fields
);

// Export the model: use existing one if already defined to avoid redefinition
export default models.Comment || model<IComment>("Comment", CommentSchema);